#!/bin/bash

echo "bash motherf*cker!"
read -p "Enter the author name: "  AUTHOR
read -p "Enter the licence type: "  LICENSE
read -p "Enter the project description: "  DESCRIPTION
read -p "Enter the project comma separated keywords: "  KEYWORDS

touch .env .env.example

cat <<EOT >> package.json
{
  "name": "${PWD##*/}",
  "version": "1.0.0",
  "description": "${DESCRIPTION}",
  "main": "index.js",
  "author": "${AUTHOR}",
  "license": "${LICENSE}",
  "keywords": [${KEYWORDS}],
  "scripts": {
    "build": "npm-run-all clean transpile",
    "transpile": "babel ./src --out-dir build",
    "clean": "rimraf build",
    "start": "node ./build/start.js",
    "start-dev": "nodemon ./src/start.js",
    "debug": "nodemon --inspect ./src/server.js",
    "test": "jest --no-cache",
    "test-cov": "jest --coverage",
    "coverage": "jest --coverage && cat ./coverage/lcov.info | coveralls"
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverage": true,
    "setupFilesAfterEnv": [
      "./src/test/setup.js"
    ]
  },
  "dependencies": {
    "@babel/cli": "^7.11.6",
    "@babel/core": "^7.11.6",
    "@babel/plugin-transform-runtime": "^7.11.5",
    "@babel/preset-env": "^7.11.5",
    "dotenv": "^8.2.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^3.0.2"
  },
  "devDependencies": {
    "babel-jest": "^26.3.0",
    "coveralls": "^3.1.0",
    "eslint": "^7.9.0",
    "eslint-plugin-node": "^11.1.0",
    "jest": "^26.4.2",
    "nodemon": "^2.0.4",
    "sucrase": "^3.15.0",
    "supertest": "^4.0.2"
  }
}


EOT
cat <<EOT >> nodemon.json
{
  "execMap": {
    "js": "node -r sucrase/register"
  }
}

EOT

cat <<EOT >> babel.config.js
module.exports = {
  plugins: ['@babel/plugin-transform-runtime'],
  presets: [
    [
      '@babel/preset-env',
      {
        targets: {
          esmodules: true,
        },
      },
    ],
  ],
};

EOT

cat <<EOT >> .prettierrc
{
  "singleQuote": true,
  "trailingComma": "es5"
}

EOT

cat <<EOT >> .eslintrc.js
module.exports = {
  env: {
    es2020: true,
    node: true,
    jest: true,
  },
  extends: [
    'airbnb-base',
    'prettier',
    'plugin:security/recommended',
    'eslint:recommended',
    'plugin:node/recommended',
  ],
  plugins: ['prettier'],
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
  },
  rules: {
    'node/exports-style': ['error', 'module.exports'],
    'node/file-extension-in-import': ['error', 'always'],
    'node/prefer-global/buffer': ['error', 'always'],
    'node/prefer-global/console': ['error', 'always'],
    'node/prefer-global/process': ['error', 'always'],
    'node/prefer-global/url-search-params': ['error', 'always'],
    'node/prefer-global/url': ['error', 'always'],
    'node/prefer-promises/dns': 'error',
    'node/prefer-promises/fs': 'error',
    'prettier/prettier': 'error',
    'class-methods-use-this': 'off',
    'no-param-reassign': 'off',
    camelcase: 'off',
    'no-unused-vars': ['error', { argsIgnorePattern: 'next' }],
  },
};

EOT

cat <<EOT >> .editorconfig
[*]
end_of_line = lf
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true

EOT

cat <<EOT >> .gitattributes
# Automatically normalize line endings for all text-based files
# http://git-scm.com/docs/gitattributes#_end_of_line_conversion
* text=auto

# For the following file types, normalize line endings to LF on
# checkin and prevent conversion to CRLF when they are checked out
# (this is required in order to prevent newline related issues like,
# for example, after the build script is run)
.*      text eol=lf
*.css   text eol=lf
*.html  text eol=lf
*.jade  text eol=lf
*.js    text eol=lf
*.json  text eol=lf
*.less  text eol=lf
*.scss  text eol=lf
*.md    text eol=lf
*.sh    text eol=lf
*.txt   text eol=lf
*.xml   text eol=lf
EOT

cat <<EOT >> .gitignore
#IDE
.vscode/
.idea/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

#Docker volume
mongodata/
pgdata/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
EOT

cat <<EOT >> .travis.yml
language: node_js
node_js:
- stable
branches:
  only:
  - master
env:
  - NODE_ENV=test
install: npm install
cache:
  directories:
    - node_modules
script: npm test
after_success:
  - npm run coverage
  - bash <(curl -s https://codecov.io/bash)
# deploy:
#   provider: heroku
#   api_key:
#     secure: !!!!!!! travis encrypt $(heroku auth:token) --add deploy.api_key !!!!!!
#   app: SET APP HERE!!!!!!
#   skip_cleanup: true
#   on:
#     branch: master

EOT

npm i --save @babel/cli @babel/preset-env @babel/plugin-transform-runtime @babel/core dotenv rimraf npm-run-all
npm i --save-dev sucrase nodemon supertest jest babel-jest eslint eslint-plugin-node coveralls

mkdir src && cd src && touch app.js start.js && mkdir test && touch test/setup.js
